# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input APIDocCompletionInput {
  code: String!
  language: String
}

type APIDocCompletionOutput {
  message: String
}

type AccessToken {
  accesToken: String!
  refreshToken: String!
}

"""Any Scalar type (String, Boolean, Int, Float, Object, List)"""
scalar Any

type AppBinding {
  application: Application
  createdAt: DateTimeISO
  creator: User!
  description: String
  domains: [Domain!]!
  email: EmailAddress!
  id: ID!
  locale: String
  name: String
  owner: Boolean
  reference: String
  refreshToken: String
  roles: [Role!]!
  scope: String
  ssoId: String
  status: String!
  updatedAt: DateTimeISO
  updater: User!
  userType: String
  username: String
  usersAuthProviders: [UsersAuthProviders!]
}

type AppBindingList {
  items: [AppBinding!]
  total: Int
}

type Appliance {
  accessToken: String
  brand: String
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  model: String
  name: String!
  netmask: String
  serialNo: String
  updatedAt: DateTimeISO
  updater: User
}

type ApplianceList {
  items: [Appliance!]
  total: Int
}

input AppliancePatch {
  brand: String
  description: String
  id: ID
  model: String
  name: String
  netmask: String
  serialNo: String
}

type Application {
  accessTokenUrl: String!
  appKey: String
  appSecret: String
  authUrl: String!
  availableScopes: String!
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  email: EmailAddress!
  icon: String
  id: ID!
  name: String!
  redirectUrl: String!
  status: String!
  type: String!
  updatedAt: DateTimeISO
  updater: User
  url: String!
  webhook: String
}

type ApplicationList {
  items: [Application!]
  total: Int
}

input ApplicationPatch {
  description: String
  email: EmailAddress
  icon: String
  name: String
  redirectUrl: String
  type: ApplicationType
  url: String
  webhook: String
}

"""state enumeration of a application"""
enum ApplicationType {
  MMS
  OTHERS
  SELLERCRAFT
  SFTP
  XERO
  XILNEX
}

"""Entity for ApprovalLine"""
type ApprovalLine {
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  model: [ApprovalLineItem!]
  name: String
  owner: ApprovalLineOwner
  ownerEmployee: Employee
  ownerType: String
  ownerValue: String
  updatedAt: DateTimeISO
  updater: User
}

"""Entity for approval line item"""
type ApprovalLineItem {
  approver: OrgMemberTarget
  type: String
  value: String
}

type ApprovalLineList {
  items: [ApprovalLine!]!
  total: Int!
}

type ApprovalLineOwner {
  controlNo: String

  """Field description"""
  description: String

  """Field id"""
  id: ID!

  """Field name"""
  name: String
}

"""type enumeration of a approvalLineOwner"""
enum ApprovalLineOwnerType {
  Common
  Employee
}

input ApprovalLinePatch {
  cuFlag: String
  description: String
  id: ID
  model: Object
  name: String
  owner: ObjectRefApprovalLineOwnerType
  ownerType: ApprovalLineOwnerType
}

type Attachment {
  category: String
  createdAt: DateTimeISO!
  creator: User
  description: String
  domain: Domain!
  encoding: String!
  fullpath: String!
  id: ID!
  mimetype: String!
  name: String!
  path: String!
  refBy: String
  refType: String
  size: String!
  tags: Object
  updatedAt: DateTimeISO!
  updater: User
}

type AttachmentList {
  items: [Attachment!]!
  total: Int!
}

input AttachmentPatch {
  category: String
  description: String
  encoding: String
  file: Upload
  mimetype: String
  name: String
  refBy: String
  refType: String
  tags: Object
}

"""Entity for AttributeSet"""
type AttributeSet {
  createdAt: DateTimeISO
  description: String
  entity: String
  id: ID!
  items: [AttributeSetItem!]
  updatedAt: DateTimeISO
}

"""Entity for AttributeSetItem"""
type AttributeSetItem {
  active: Boolean
  description: String
  hidden: Boolean
  name: String!
  options: Object
  tag: String
  type: String
}

input AttributeSetItemPatch {
  active: Boolean
  description: String
  hidden: Boolean
  name: String
  options: Object
  tag: String
  type: AttributeSetItemType
}

"""type enumeration of a attribute-set-item"""
enum AttributeSetItemType {
  boolean
  date
  datetime
  file
  number
  select
  text
}

type AttributeSetList {
  items: [AttributeSet!]!
  total: Int!
}

input AttributeSetPatch {
  cuFlag: String
  description: String
  entity: String
  id: ID
  items: [AttributeSetItemPatch!]
}

"""Entity for AuthProvider"""
type AuthProvider {
  active: Boolean
  clientId: String
  clientSecret: String
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  id: ID!
  params: Object
  privateKey: String
  tenantId: String
  type: String
  updatedAt: DateTimeISO
  updater: User
  usersAuthProviders: [UsersAuthProviders!]
}

type AuthProviderList {
  items: [AuthProvider!]!
  total: Int!
}

type AuthProviderParameterSpec {
  label: String!
  name: String!
  placeholder: String
  property: Object
  styles: Object
  type: String!
}

input AuthProviderPatch {
  active: Boolean
  clientId: String
  clientSecret: String
  cuFlag: String
  id: ID
  params: Object
  privateKey: String
  tenantId: String
  type: String
}

type AuthProviderType {
  description: String
  help: String
  parameterSpec: [AuthProviderParameterSpec!]
  type: String!
}

type AuthProviderTypeList {
  items: [AuthProviderType!]!
  total: Int!
}

"""Entity for Visualization Board"""
type Board {
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  description: String
  domain: Domain
  group: Group
  id: ID
  model: String
  name: String!
  playGroups: [PlayGroup!]
  state: String
  thumbnail: String
  updatedAt: DateTimeISO
  updater: User
  version: Float
}

type BoardFavorite {
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  description: String
  domain: Domain
  favoriteId: String
  group: Group
  id: ID
  model: String
  name: String!
  playGroups: [PlayGroup!]
  state: String
  thumbnail: String
  updatedAt: DateTimeISO
  updater: User
  version: Float
}

type BoardFavoriteList {
  items: [BoardFavorite!]!
  total: Int!
}

"""History Entity of Board"""
type BoardHistory {
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  description: String
  domain: Domain
  group: Group
  id: ID!
  model: String
  name: String!
  playGroups: [PlayGroup!]
  thumbnail: String
  updatedAt: DateTimeISO
  updater: User
  version: Float
}

type BoardList {
  items: [Board!]!
  total: Int!
}

input BoardPatch {
  description: String
  groupId: String
  model: String
  name: String
  thumbnail: String
}

"""Entity for BoardTemplate"""
type BoardTemplate {
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  mine: Boolean!
  model: String
  name: String
  tags: Object
  thumbnail: String
  updatedAt: DateTimeISO
  updater: User
  visibility: String
}

type BoardTemplateList {
  items: [BoardTemplate!]!
  total: Int!
}

input BoardTemplatePatch {
  cuFlag: String
  description: String
  id: ID
  model: String
  name: String
  thumbnail: String
  visibility: String
}

input ChatCompletionInput {
  content: String!
}

type ChatCompletionOutput {
  message: String
}

input CodeDecipherInput {
  code: String!
  language: String
  system: String
}

type CodeDecipherOutput {
  message: String
}

"""Entity for CommonCode"""
type CommonCode {
  createdAt: DateTimeISO
  creator: User
  description: String
  details: [CommonCodeDetail!]!
  domain: Domain!
  id: ID!
  name: String!
  updatedAt: DateTimeISO
  updater: User
}

"""Entity for CommonCodeDetail"""
type CommonCodeDetail {
  commonCode: CommonCode
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  labels: Object
  name: String!
  rank: Float
  updatedAt: DateTimeISO
  updater: User
}

type CommonCodeDetailList {
  items: [CommonCodeDetail!]!
  total: Int!
}

input CommonCodeDetailPatch {
  commonCode: ObjectRef!
  cuFlag: String
  description: String
  id: ID
  labels: Object
  name: String
  rank: Float
}

type CommonCodeList {
  items: [CommonCode!]!
  total: Int!
}

input CommonCodePatch {
  cuFlag: String
  description: String
  details: [String!]
  id: ID
  name: String
}

type Connection {
  active: Boolean
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain
  edge: Appliance
  endpoint: String
  id: ID!
  name: String!
  params: Object
  state: String
  type: String
  updatedAt: DateTimeISO
  updater: User
}

type ConnectionList {
  items: [Connection!]!
  total: Int!
}

input ConnectionPatch {
  active: Boolean
  cuFlag: String
  description: String
  edge: ObjectRef
  endpoint: String
  id: ID
  name: String
  params: Object
  type: String
}

type ConnectionState {
  description: String
  domain: Domain!
  edge: Appliance
  id: String
  name: String
  state: String
  timestamp: DateTimeISO
  type: String
}

type ConnectorList {
  items: [ConnectorType!]!
  total: Int!
}

type ConnectorType {
  description: String
  help: String
  name: String!
  parameterSpec: [PropertySpec!]
  taskPrefixes: [String!]
}

"""Entity for Contact"""
type Contact {
  address: String
  company: String
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  department: String
  domain: Domain!
  email: EmailAddress
  id: ID!
  items: [ContactItem!]
  name: String
  note: String
  phone: String
  profile: Profile
  updatedAt: DateTimeISO
  updater: User
}

type ContactItem {
  label: String!
  type: String!
  value: String!
}

input ContactItemPatch {
  label: String!
  type: String!
  value: String!
}

type ContactList {
  items: [Contact!]!
  total: Int!
}

input ContactPatch {
  address: String
  company: String
  cuFlag: String
  department: String
  email: EmailAddress
  id: ID
  items: [ContactItemPatch!]
  name: String
  note: String
  phone: String
  profile: ProfileInput
}

type Data {
  """Data delivered by subscription"""
  data: Object

  """The domain where the data originated"""
  domain: Domain

  """Tag name attached to data"""
  tag: String!
}

"""Date custom scalar type"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""Entity for Department"""
type Department {
  active: Boolean
  children(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): [Department!]!
  controlNo: String!
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  description: String
  domain: Domain!
  extension: String
  id: ID!
  manager: Employee
  members: [Employee!]!
  name: String
  parent: Department
  picture: String
  updatedAt: DateTimeISO
  updater: User
  version: Float
}

type DepartmentList {
  items: [Department!]!
  total: Int!
}

input DepartmentPatch {
  active: Boolean
  controlNo: String
  cuFlag: String
  description: String
  id: ID
  manager: ObjectRefForEmployee
  name: String
  parent: ObjectRef
  picture: Upload
}

type Domain {
  attributes: Object
  brandImage: String
  brandName: String
  children: Domain
  contentImage: String
  createdAt: DateTimeISO
  deletedAt: DateTimeISO
  description: String
  extType: String
  id: ID!
  iplist: Object
  name: String!
  owner: String
  ownerUser: User
  parent: Domain
  subdomain: String
  systemFlag: Boolean
  theme: String
  timezone: String
  updatedAt: DateTimeISO
}

input DomainGeneratorInput {
  description: String
  name: String!
}

input DomainInput {
  description: String
  extType: String
  name: String!
}

"""Entity for DomainLink representing a connection between two domains"""
type DomainLink {
  createdAt: DateTimeISO!
  creator: User
  id: ID!
  sourceDomain: Domain!
  targetDomain: Domain!
  type: String!
  updatedAt: DateTimeISO!
  updater: User
}

type DomainLinkList {
  items: [DomainLink!]!
  total: Int!
}

input DomainLinkPatch {
  cuFlag: String
  id: ID!
  sourceDomain: ObjectRef
  targetDomain: ObjectRef
  type: String
}

type DomainList {
  items: [Domain!]
  total: Int
}

input DomainPatch {
  attributes: Object
  brandImage: String
  brandName: String
  contentImage: String
  description: String
  extType: String
  id: String
  name: String
  owner: String
  parent: ObjectRef
  subdomain: String
  systemFlag: Boolean
  theme: String
  timezone: String
}

input DomainUserRoleInput {
  domain: DomainInput!
  roles: [NewRole!]!
  users: [NewUserByDomainWizardInput!]!
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

"""Entity for Employee"""
type Employee {
  active: Boolean
  address: String
  alias: String
  approvalLines: [ApprovalLine!]!
  bankAccount: String
  bankName: String
  contact: Contact
  controlNo: String!
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  department: Department
  domain: Domain!
  email: EmailAddress
  emergencyContact: String
  emergencyContactPhone: String
  extension: String
  hiredOn: DateTimeISO
  id: ID!
  jobPosition: String
  jobResponsibility: String
  manages: [Department!]!
  name: String
  note: String
  phone: String
  photo: String
  profile: Profile
  retiredOn: DateTimeISO
  supervises: [Employee!]!
  supervisor: Employee
  type: String
  updatedAt: DateTimeISO
  updater: User
  user: User
  version: Float
}

type EmployeeList {
  items: [Employee!]!
  total: Int!
}

input EmployeePatch {
  active: Boolean
  alias: String
  bankAccount: String
  bankName: String
  contact: ObjectRefForContact
  controlNo: String
  cuFlag: String
  department: ObjectRefForDepartment
  emergencyContact: String
  emergencyContactPhone: String
  hiredOn: DateTimeISO
  id: ID
  jobPosition: String
  jobResponsibility: String
  name: String
  note: String
  photo: Upload
  retiredOn: DateTimeISO
  supervisor: ObjectRefForEmployee
  type: EmployeeType
  user: ObjectRefForUser
}

"""type enumeration of a employee"""
enum EmployeeType {
  FULLTIME
  PARTTIME
  TEMPORARY
}

"""Entity for Entity"""
type Entity {
  active: Boolean
  association: String
  bundle: String!
  children: [Entity!]
  columns: [EntityColumn!]
  createdAt: DateTimeISO
  creator: User
  dataProp: String
  delStrategy: String
  description: String
  domain: Domain!
  extEntity: Boolean
  fixedColumns: Float
  id: ID!
  idField: String
  idType: String
  master: Entity
  multiSaveUrl: String
  name: String!
  refField: String
  searchUrl: String
  tableName: String!
  titleField: String
  updatedAt: DateTimeISO
  updater: User
}

"""Entity for EntityColumn"""
type EntityColumn {
  colSize: Float
  colType: String!
  createdAt: DateTimeISO
  creator: User
  defVal: String
  description: String
  domain: Domain!
  entity: Entity!
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Float
  gridValidator: String
  gridWidth: Float
  id: ID!
  ignoreOnSav: Boolean
  name: String!
  nullable: Boolean
  rangeVal: String
  rank: Float
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Float
  sortRank: Float
  term: String
  uniqRank: Float
  updatedAt: DateTimeISO
  updater: User
  virtualField: Boolean
}

type EntityColumnList {
  items: [EntityColumn!]!
  total: Int!
}

"""EntityColumn of Entity"""
type EntityColumnMetadata {
  enum: [Any!]
  generatedType: String
  isArray: Boolean
  isNullable: Boolean!
  isPrimary: Boolean
  isReadonly: Boolean
  isUpdateDate: Boolean
  isVersion: Boolean
  length: Float
  propertyName: String!
  referenceColumn: Any
  relationMetadata: EntityRelationMetadata
  target: Any
  type: Any!
  width: Int
}

input EntityColumnPatch {
  colSize: Int
  colType: String
  cuFlag: String
  defVal: String
  description: String
  entity: ObjectRef
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Int
  gridValidator: String
  gridWidth: Int
  id: ID
  ignoreOnSav: Boolean
  name: String
  nullable: Boolean
  rangeVal: String
  rank: Int
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Int
  sortRank: Float
  term: String
  uniqRank: Int
  virtualField: Boolean
}

type EntityList {
  items: [Entity!]!
  total: Int!
}

"""Entity for EntityMetadata"""
type EntityMetadata {
  columns: [EntityColumnMetadata!]
  name: String!
}

input EntityPatch {
  active: Boolean
  association: String
  bundle: String
  children: [String!]
  columns: [String!]
  cuFlag: String
  dataProp: String
  delStrategy: String
  description: String
  extEntity: Boolean
  fixedColumns: Int
  id: ID
  idField: String
  idType: String
  master: String
  multiSaveUrl: String
  name: String
  refField: String
  searchUrl: String
  tableName: String
  titleField: String
}

"""RelationType of EntityColumn"""
type EntityRelationMetadata {
  isManyToOne: Boolean
  isOneToMany: Boolean
  isOneToOne: Boolean
  joinColumns: [EntityColumnMetadata!]
  joinTableName: String
  relationType: Boolean
}

"""Entity for Favorite"""
type Favorite {
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  id: ID!
  routing: String!
  updatedAt: DateTimeISO
  updater: User
  user: User!
}

type FavoriteList {
  items: [Favorite!]!
  total: Int!
}

input Filter {
  name: String!
  operator: String!
  relation: Boolean
  value: Any
}

"""Entity for Font"""
type Font {
  active: Boolean!
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  files: [Attachment!]
  id: ID!
  name: String!
  path: String
  provider: String!
  updatedAt: DateTimeISO
  updater: User
  uri: String
}

type FontList {
  items: [Font!]!
  total: Int!
}

input FontPatch {
  active: Boolean
  files: [Upload!]
  name: String
  path: String
  provider: String
  uri: String
}

type GrantedRole {
  domain: Domain!
  id: ID!
  role: Role!
}

"""Entity for Board Management Group"""
type Group {
  boards: [Board!]
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain
  id: ID!
  name: String!
  updatedAt: DateTimeISO
  updater: User
}

type GroupList {
  items: [Group!]!
  total: Int!
}

input GroupPatch {
  description: String
  name: String
}

input ImageCompletionInput {
  count: Float!
  description: String!
  size: String!
}

type ImageCompletionOutput {
  images: String
}

enum InheritedValueType {
  Include
  None
  Only
}

type Invitation {
  createdAt: DateTimeISO
  creator: User
  email: EmailAddress!
  id: ID!
  reference: String!
  token: String!
  type: String!
  updatedAt: DateTimeISO
  updater: User
}

type InvitationList {
  items: [Invitation!]
  total: Int
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Log {
  """log level (error, warning, info, ..)"""
  level: String!

  """log body message"""
  message: String!

  """the source of the log"""
  source: Object!

  """timestamp the log occurred"""
  timestamp: String!
}

type LoginHistory {
  accessDomain: Domain!
  accessUser: User!
  accessedAt: DateTimeISO
  accessorIp: String
  id: ID!
}

type LoginHistoryList {
  items: [LoginHistory!]!
  total: Int!
}

"""Entity for Menu"""
type Menu {
  buttons: [MenuButton!]!
  category: String
  children(permittedOnly: Boolean! = false): [Menu!]!
  columns: [MenuColumn!]!
  createdAt: DateTimeISO
  creator: User
  description: String
  detailFormId: String
  detailLayout: String
  domain: Domain!
  fixedColumns: Float
  gridSaveUrl: String
  hiddenFlag: Boolean
  iconPath: String
  id: ID!
  idField: String
  itemsProp: String
  menuType: String
  name: String
  pagination: Boolean
  parent: Menu
  rank: Float
  resourceId: String
  resourceName: String
  resourceType: String
  resourceUrl: String
  role: Role
  roles: [Role!]
  routing: String
  routingType: String
  template: String
  titleField: String
  totalProp: String
  updatedAt: DateTimeISO
  updater: User
}

"""Entity for MenuButton"""
type MenuButton {
  auth: String
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  icon: String
  id: ID!
  logic: String
  menu: Menu
  rank: Float
  style: String
  text: String
  updatedAt: DateTimeISO
  updater: User
}

type MenuButtonList {
  items: [MenuButton!]!
  total: Int!
}

input MenuButtonPatch {
  auth: String
  icon: String
  logic: String
  menu: String
  rank: Int
  style: String
  text: String
}

"""Entity for MenuColumn"""
type MenuColumn {
  colSize: Float
  colType: String
  createdAt: DateTimeISO
  creator: User
  defVal: String
  description: String
  domain: Domain!
  extField: Boolean
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Float
  gridValidator: String
  gridWidth: Float
  id: ID!
  ignoreOnSave: Boolean
  menu: Menu
  name: String!
  nullable: Boolean
  rangeVal: String
  rank: Float
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Float
  sortRank: Float
  term: String
  uniqRank: Float
  updatedAt: DateTimeISO
  updater: User
  virtualField: Boolean
}

type MenuColumnList {
  items: [MenuColumn!]!
  total: Int!
}

input MenuColumnPatch {
  colSize: Int
  colType: String
  defVal: String
  description: String
  extField: Boolean
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Int
  gridValidator: String
  gridWidth: Int
  ignoreOnSave: Boolean
  menu: String
  name: String
  nullable: Boolean
  rangeVal: String
  rank: Int
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Int
  sortRank: Int
  term: String
  uniqRank: Int
  virtualField: Boolean
}

"""Entity for MenuDetail"""
type MenuDetail {
  association: String
  buttons: [MenuDetailButton!]
  columns: [MenuDetailColumn!]
  createdAt: DateTimeISO
  creator: User
  customView: String
  dataProp: String
  domain: Domain!
  entityId: String
  id: ID!
  masterField: String
  menu: Menu
  name: String!
  saveUrl: String
  searchUrl: String
  updatedAt: DateTimeISO
  updater: User
  viewSection: String
}

"""Entity for MenuDetailButton"""
type MenuDetailButton {
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  icon: String
  id: ID!
  logic: String
  menuDetail: MenuDetail
  rank: Float
  style: String
  text: String
  updatedAt: DateTimeISO
  updater: User
}

type MenuDetailButtonList {
  items: [MenuDetailButton!]!
  total: Int!
}

input MenuDetailButtonPatch {
  icon: String
  logic: String
  menuDetail: String
  rank: Int
  style: String
  text: String
}

"""Entity for MenuDetailColumn"""
type MenuDetailColumn {
  colSize: Float
  colType: String
  createdAt: DateTimeISO
  creator: User
  defVal: String
  description: String
  domain: Domain!
  extField: Boolean
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Float
  gridValidator: String
  gridWidth: Float
  id: ID!
  ignoreOnSave: Boolean
  menuDetail: MenuDetail
  name: String
  nullable: Boolean
  rangeVal: String
  rank: Float
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Float
  sortRank: Float
  term: String
  uniqRank: Float
  updatedAt: DateTimeISO
  updater: User
  virtualField: Boolean
}

type MenuDetailColumnList {
  items: [MenuDetailColumn!]!
  total: Int!
}

input MenuDetailColumnPatch {
  colSize: Int
  colType: String!
  defVal: String
  description: String
  extField: Boolean
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Int
  gridValidator: String
  gridWidth: Int
  ignoreOnSave: Boolean
  menuDetail: String!
  name: String!
  nullable: Boolean
  rangeVal: String
  rank: Int
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Int
  sortRank: Int
  term: String
  uniqRank: Int
  virtualField: Boolean
}

type MenuDetailList {
  items: [MenuDetail!]!
  total: Int!
}

input MenuDetailPatch {
  association: String
  buttons: [String!]
  columns: [String!]
  customView: String
  dataProp: String
  entityId: String
  masterField: String
  menu: String
  name: String
  saveUrl: String
  searchUrl: String
  viewSection: String
}

type MenuList {
  items: [Menu!]!
  total: Int!
}

input MenuPatch {
  buttons: [ObjectRef!]
  category: String
  children: [ObjectRef!]
  columns: [ObjectRef!]
  cuFlag: String
  description: String
  detailFormId: String
  detailLayout: String
  fixedColumns: Int
  gridSaveUrl: String
  hiddenFlag: Boolean
  iconPath: String
  id: ID
  idField: String
  itemsProp: String
  menuType: String
  name: String
  pagination: Boolean
  parent: ObjectRef
  rank: Int
  resourceId: String
  resourceName: String
  resourceType: String
  resourceUrl: String
  role: ObjectRef
  routing: String
  routingType: String
  template: String
  titleField: String
  totalProp: String
}

type Mutation {
  """To activate user"""
  activateUser(username: String!): Boolean!

  """
  Attaches an existing contact to an employee. The contact is identified by its ID and the employee is identified by their ID.
  """
  attachContact(contactId: String!, id: String!): Employee!
  cancelInvitation(email: EmailAddress!, reference: String!, type: String!): Boolean!

  """To clear translations cache"""
  clearTranslationsCache: Boolean!

  """To clone a Board from existing Board"""
  cloneBoard(id: String!, patch: BoardPatch!, targetGroupId: String, targetSubdomain: String!): Board!

  """To connect a connection"""
  connectConnection(name: String!): Connection!

  """To import multiple scenarios"""
  copyScenarios(ids: [String!]!): [Scenario!]!

  """To create new appliance"""
  createAppliance(appliance: NewAppliance!): Appliance!

  """To create new application"""
  createApplication(application: NewApplication!): Application!

  """To create new ApprovalLine"""
  createApprovalLine(approvalLine: NewApprovalLine!): ApprovalLine!
  createAttachment(attachment: NewAttachment!): Attachment!
  createAttachments(attachments: [NewAttachment!]!): [Attachment!]!

  """To create new AttributeSet"""
  createAttributeSet(attribute: NewAttributeSet!): AttributeSet!

  """To create new AuthProvider"""
  createAuthProvider(authProvider: NewAuthProvider!): AuthProvider!

  """To create new Board"""
  createBoard(board: NewBoard!): Board!

  """To create new BoardTemplate"""
  createBoardTemplate(boardTemplate: NewBoardTemplate!): BoardTemplate!

  """To create new CommonCode"""
  createCommonCode(commonCode: NewCommonCode!): CommonCode!

  """To create new CommonCodeDetail"""
  createCommonCodeDetail(commonCodeDetail: NewCommonCodeDetail!): CommonCodeDetail!

  """To create new connection"""
  createConnection(connection: NewConnection!): Connection!

  """To create new Contact"""
  createContact(contact: NewContact!): Contact!

  """To create new Department"""
  createDepartment(department: NewDepartment!): Department!

  """To create domain (Only superuser is granted this privilege.)"""
  createDomain(domainInput: DomainPatch!): Domain!

  """To create new DomainLink"""
  createDomainLink(domainLink: NewDomainLink!): DomainLink!

  """
  Creates a new employee record with the provided details. Optionally associates the employee with a supervisor, department, and system user. If a photo is provided, it will be attached to the employee record.
  """
  createEmployee(employee: NewEmployee!): Employee!

  """To create new Entity"""
  createEntity(entity: NewEntity!): Entity!

  """To create new EntityColumn"""
  createEntityColumn(entityColumn: NewEntityColumn!): EntityColumn!

  """To create new Favorite"""
  createFavorite(favorite: NewFavorite!): Favorite!

  """To create new Font"""
  createFont(font: NewFont!): Font!

  """To create new Group"""
  createGroup(group: NewGroup!): Group

  """To create new Menu"""
  createMenu(menu: NewMenu!): Menu!

  """To create new MenuButton"""
  createMenuButton(menuButton: NewMenuButton!): MenuButton!

  """To create new MenuColumn"""
  createMenuColumn(menuColumn: NewMenuColumn!): MenuColumn!

  """To create new MenuDetail"""
  createMenuDetail(menuDetail: NewMenuDetail!): MenuDetail!

  """To create new MenuDetailButton"""
  createMenuDetailButton(menuDetailButton: NewMenuDetailButton!): MenuDetailButton!

  """To create new MenuDetailColumn"""
  createMenuDetailColumn(menuDetailColumn: NewMenuDetailColumn!): MenuDetailColumn!

  """To create new ApprovalLine for current user"""
  createMyApprovalLine(approvalLine: NewApprovalLine!): ApprovalLine!

  """To create my new PagePreference"""
  createMyPagePreference(pagePreference: NewPagePreference!): PagePreference!

  """To create new Notification"""
  createNotification(notification: NewNotification!): Notification!

  """To create new NotificationRule"""
  createNotificationRule(notificationRule: NewNotificationRule!): NotificationRule!

  """To create new Oauth2Client"""
  createOauth2Client(oauth2Client: NewOauth2Client!): Oauth2Client!

  """To create new PDFRelease"""
  createPDFRelease(pdfRelease: NewPDFRelease!): PDFRelease!

  """To create new PDFTemplate"""
  createPDFTemplate(pdfTemplate: NewPDFTemplate!): PDFTemplate!

  """To create new PayloadLog"""
  createPayloadLog(payloadLog: NewPayloadLog!): PayloadLog!

  """To create new PlayGroup"""
  createPlayGroup(playGroup: NewPlayGroup!): PlayGroup!

  """To create new PrinterDevice"""
  createPrinterDevice(printerDevice: NewPrinterDevice!): PrinterDevice!

  """To create new privilege"""
  createPrivilege(privilege: NewPrivilege!): Privilege!

  """To create new user"""
  createRole(role: NewRole!): User!

  """To create new scenario"""
  createScenario(scenario: NewScenario!): Scenario!

  """To create new Setting"""
  createSetting(setting: NewSetting!): Setting!

  """To create new StateRegister"""
  createStateRegister(stateRegister: NewStateRegister!): StateRegister!

  """To create new Terminology"""
  createTerminology(terminology: NewTerminology!): Terminology!

  """To create new Theme"""
  createTheme(theme: NewTheme!): Theme!

  """To create new user"""
  createUser(user: NewUser!): User!

  """To create new UserPreference"""
  createUserPreference(preference: NewUserPreference!): UserPreference!
  deleteAppBinding(id: String!): Boolean!

  """To delete appliance"""
  deleteAppliance(id: String!): Boolean!

  """To delete application"""
  deleteApplication(id: String!): Boolean!

  """To delete ApprovalLine"""
  deleteApprovalLine(id: String!): Boolean!

  """To delete multiple ApprovalLines"""
  deleteApprovalLines(ids: [String!]!): Boolean!
  deleteAttachment(id: String!): Boolean!
  deleteAttachmentsByRef(refBys: [String!]!, refType: String): Boolean!

  """To delete AttributeSet"""
  deleteAttributeSet(id: String!): Boolean!

  """To delete multiple AttributeSets"""
  deleteAttributeSets(ids: [String!]!): Boolean!

  """To delete AuthProvider"""
  deleteAuthProvider(id: String!): Boolean!
  deleteAuthProviders(ids: [String!]!): Boolean!

  """To delete Board"""
  deleteBoard(id: String!): Boolean!

  """To delete BoardTemplate"""
  deleteBoardTemplate(id: String!): Boolean!

  """To delete CommonCode"""
  deleteCommonCode(id: String!): Boolean!

  """To delete CommonCodeDetail"""
  deleteCommonCodeDetail(id: String!): Boolean!

  """To delete multiple CommonCodeDetails"""
  deleteCommonCodeDetails(ids: [String!]!): Boolean!

  """To delete multiple CommonCodes"""
  deleteCommonCodes(ids: [String!]!): Boolean!

  """To delete connection"""
  deleteConnection(name: String!): Boolean!

  """To delete multiple connections"""
  deleteConnections(names: [String!]!): Boolean!

  """To delete Contact"""
  deleteContact(id: String!): Boolean!

  """To delete multiple Contacts"""
  deleteContacts(ids: [String!]!): Boolean!

  """To delete Department"""
  deleteDepartment(id: String!): Boolean!

  """To delete multiple Departments"""
  deleteDepartments(ids: [String!]!): Boolean!

  """To delete domain (Only superuser is granted this privilege.)"""
  deleteDomain(name: String!): Domain!

  """To delete DomainLink"""
  deleteDomainLink(id: String!): Boolean!

  """To delete multiple DomainLinks"""
  deleteDomainLinks(ids: [String!]!): Boolean!

  """To delete domain user"""
  deleteDomainUser(username: String!): Boolean!

  """To delete multiple domains (Only superuser is granted this privilege.)"""
  deleteDomains(names: [String!]!): Boolean!

  """
  Deletes an employee record identified by the given ID. Also deletes any attachments associated with the employee.
  """
  deleteEmployee(id: String!): Boolean!

  """
  Deletes multiple employee records identified by the given IDs. Also deletes any attachments associated with each employee.
  """
  deleteEmployees(ids: [String!]!): Boolean!

  """To delete multiple Entities"""
  deleteEntities(ids: [String!]!): Boolean!

  """To delete Entity"""
  deleteEntity(id: String!): Boolean!

  """To delete EntityColumn"""
  deleteEntityColumn(id: String!): Boolean!

  """To delete multiple EntityColumns"""
  deleteEntityColumns(ids: [String!]!): Boolean!

  """To delete Favorite"""
  deleteFavorite(routing: String!): Boolean!

  """To delete Font"""
  deleteFont(id: String!): Boolean!

  """To delete Group"""
  deleteGroup(id: String!): Boolean!

  """To delete Menu"""
  deleteMenu(id: String!): Boolean!

  """To delete MenuButton"""
  deleteMenuButton(id: String!): Boolean!

  """To delete multiple MenuButtons"""
  deleteMenuButtons(ids: [String!]!): Boolean!

  """To delete MenuColumn"""
  deleteMenuColumn(id: String!): Boolean!

  """To delete multiple MenuColumns"""
  deleteMenuColumns(ids: [String!]!): Boolean!

  """To delete MenuDetail"""
  deleteMenuDetail(id: String!): Boolean!

  """To delete MenuDetailButton"""
  deleteMenuDetailButton(id: String!): Boolean!

  """To delete multiple MenuDetailButtons"""
  deleteMenuDetailButtons(ids: [String!]!): Boolean!

  """To delete MenuDetailColumn"""
  deleteMenuDetailColumn(id: String!): Boolean!

  """To delete multiple MenuDetailColumns"""
  deleteMenuDetailColumns(ids: [String!]!): Boolean!

  """To delete multiple MenuDetails"""
  deleteMenuDetails(ids: [String!]!): Boolean!

  """To delete multiple Menus"""
  deleteMenus(ids: [String!]!): Boolean!

  """To delete ApprovalLine for current user"""
  deleteMyApprovalLine(id: String!): Boolean!

  """To delete multiple ApprovalLines for current user"""
  deleteMyApprovalLines(ids: [String!]!): Boolean!

  """To delete my PagePreference"""
  deleteMyPagePreference(element: String!, page: String!): Boolean!

  """To delete my preference"""
  deleteMyUserPreference(element: String!, key: String!): Boolean!

  """To delete Notification"""
  deleteNotification(id: String!): Boolean!

  """To delete NotificationRule"""
  deleteNotificationRule(id: String!): Boolean!

  """To delete multiple NotificationRules"""
  deleteNotificationRules(ids: [String!]!): Boolean!

  """To delete multiple Notificationes"""
  deleteNotificationes(ids: [String!]!): Boolean!

  """To delete Oauth2Client"""
  deleteOauth2Client(id: String!): Boolean!

  """To delete multiple Oauth2Clients"""
  deleteOauth2Clients(ids: [String!]!): Boolean!

  """To delete PDFRelease"""
  deletePDFRelease(id: String!): Boolean!

  """To delete multiple PDFReleases"""
  deletePDFReleases(ids: [String!]!): Boolean!

  """To delete PDFTemplate"""
  deletePDFTemplate(id: String!): Boolean!

  """To delete multiple PDFTemplates"""
  deletePDFTemplates(ids: [String!]!): Boolean!

  """To delete PagePreference"""
  deletePagePreference(id: String!): Boolean!

  """To delete multiple PagePreferences"""
  deletePagePreferences(ids: [String!]!): Boolean!

  """To delete multiple partnerSettings"""
  deletePartnerSettings(ids: [String!]!): Boolean!

  """To delete PayloadLog"""
  deletePayloadLog(id: String!): Boolean!

  """To delete multiple payloadLogs"""
  deletePayloadLogs(ids: [String!]!): Boolean!

  """To delete PlayGroup"""
  deletePlayGroup(id: String!): Boolean!

  """To delete PrinterDevice"""
  deletePrinterDevice(id: String!): Boolean!

  """To delete multiple printerDevices"""
  deletePrinterDevices(ids: [String!]!): Boolean!

  """To delete privilege"""
  deletePrivilege(category: String!, name: String!): Boolean!

  """To delete role"""
  deleteRole(id: String!): Boolean!

  """To delete multiple roles"""
  deleteRoles(ids: [String!]!): Boolean!

  """To delete scenario"""
  deleteScenario(name: String!): Boolean!

  """To delete multiple scenarios"""
  deleteScenarios(ids: [String!]!): Boolean!

  """To delete Setting"""
  deleteSetting(name: String!): Boolean!

  """To delete multiple settings"""
  deleteSettings(names: [String!]!): Boolean!

  """To delete StateRegister"""
  deleteStateRegister(id: String!): Boolean!

  """To delete multiple StateRegisters"""
  deleteStateRegisters(ids: [String!]!): Boolean!

  """To delete multiple steps"""
  deleteSteps(ids: [String!]!): Boolean!

  """To delete multiple Terminologies"""
  deleteTerminologies(ids: [String!]!): Boolean!

  """To delete Terminology"""
  deleteTerminology(id: String!): Boolean!

  """To delete Theme"""
  deleteTheme(id: String!): Boolean!

  """To delete multiple Themes"""
  deleteThemes(ids: [String!]!): Boolean!

  """To delete a user"""
  deleteUser(username: String!): Boolean!

  """To delete UserPreference"""
  deleteUserPreference(id: String!): Boolean!

  """To delete multiple UserPreferences"""
  deleteUserPreferences(ids: [String!]!): Boolean!

  """To delete some users"""
  deleteUsers(usernames: [String!]!): Boolean!

  """
  Detaches an existing contact from an employee. The employee is identified by their ID.
  """
  detachContact(id: String!): Employee!

  """To disconnect a connection"""
  disconnectConnection(name: String!): Connection!
  domainRegister(domainInput: DomainGeneratorInput!): Domain!
  domainUserRoleRegister(newDomainInfo: DomainUserRoleInput!): Domain!
  generateApplianceSecret(id: String!): Appliance!
  generateApplicationSecret(id: String!): Application!
  generateUploadURL(type: String!): UploadURL!

  """To get oauth2 auth URL"""
  getOauth2AuthUrl(id: String!): String!
  grantRoles(customerId: String!, roles: [RolePatch!]!): Boolean!

  """To import multiple ApprovalLines"""
  importApprovalLines(approvalLines: [ApprovalLinePatch!]!): Boolean!

  """To import some Attachments"""
  importAttachments(file: Upload!): [Attachment!]!

  """To import multiple AttributeSets"""
  importAttributeSets(attributes: [AttributeSetPatch!]!): Boolean!

  """To import some Boards"""
  importBoards(files: [Upload!]!, groupId: String!, overwrite: Boolean!): [Board!]!

  """To import multiple CommonCodeDetails"""
  importCommonCodeDetails(commonCodeDetails: [CommonCodeDetailPatch!]!): Boolean!

  """To import multiple CommonCodes"""
  importCommonCodes(commonCodes: [CommonCodePatch!]!): Boolean!

  """To import multiple connections"""
  importConnections(connections: [ConnectionPatch!]!): Boolean!

  """To import multiple Contacts"""
  importContacts(contacts: [ContactPatch!]!): Boolean!

  """To import multiple Departments"""
  importDepartments(departments: [DepartmentPatch!]!): Boolean!

  """
  Imports multiple employee records into the system. Each employee record must be provided in the EmployeePatch format.
  """
  importEmployees(employees: [EmployeePatch!]!): Boolean!

  """To import multiple MenuButtons"""
  importMenuButtons(menuButtons: [MenuButtonPatch!]!): Boolean!

  """To import multiple MenuColumns"""
  importMenuColumns(menuColumns: [MenuColumnPatch!]!): Boolean!

  """To import multiple MenuDetailButtons"""
  importMenuDetailButtons(menuDetailButtons: [MenuDetailButtonPatch!]!): Boolean!

  """To import multiple MenuDetailColumns"""
  importMenuDetailColumns(menuDetailColumns: [MenuDetailColumnPatch!]!): Boolean!

  """To import multiple MenuDetails"""
  importMenuDetails(menuDetails: [MenuDetailPatch!]!): Boolean!

  """To import multiple Menus"""
  importMenus(menus: [MenuPatch!]!): Boolean!

  """To import multiple NotificationRules"""
  importNotificationRules(notificationRules: [NotificationRulePatch!]!): Boolean!

  """To import multiple Oauth2Clients"""
  importOauth2Clients(oauth2Clients: [Oauth2ClientPatch!]!): Boolean!

  """To import multiple PDFReleases"""
  importPDFReleases(pdfReleases: [PDFReleasePatch!]!): Boolean!

  """To import multiple PDFTemplates"""
  importPDFTemplates(pdfTemplates: [PDFTemplatePatch!]!): Boolean!

  """To import multiple scenarios"""
  importScenarios(scenarios: [ScenarioPatch!]!): Boolean!

  """To import multiple StateRegisters"""
  importStateRegisters(stateRegisters: [StateRegisterPatch!]!): Boolean!

  """To import multiple Terminologies"""
  importTerminologies(terminologies: [TerminologyPatch!]!): Boolean!

  """To import multiple Themes"""
  importThemes(themes: [ThemePatch!]!): Boolean!

  """To inactivate user"""
  inactivateUser(username: String!): Boolean!
  inviteCustomer(customerDomainName: String!): Boolean!

  """To invite new user"""
  inviteUser(username: String!): Boolean!

  """To make the board to join the group"""
  joinGroup(boardIds: [String!]!, id: String!): Group!

  """To make the board to join the play group"""
  joinPlayGroup(boardIds: [String!]!, id: String!): PlayGroup!

  """To make the board to leave from the play group"""
  leavePlayGroup(boardIds: [String!]!, id: String!): PlayGroup!
  multipleUpload(files: [Upload!]!): [Attachment!]!

  """To refresh oauth2 access token"""
  refreshOauth2AccessToken(id: String!): Oauth2Client!

  """To register a board as a board template with the given ID"""
  registerBoardAsTemplate(
    """description of board template to be regiestered"""
    description: String!

    """board Id to be regiestered"""
    id: String!

    """name of board template to be regiestered"""
    name: String!

    """visibility of board template to be regiestered"""
    visibility: String!
  ): BoardTemplate!

  """
  Registers an existing employee as a system user, granting them access to the system. The employee is identified by their ID.
  """
  registerEmployeeAsSystemUser(
    """Employee Id"""
    employeeId: String!
  ): Boolean!
  registerSchedule(schedule: NewSchedule!): ID!

  """To release a Board"""
  releaseBoard(id: String!): Board!
  renewApplicationAccessToken(id: String!, scope: String!): AccessToken!

  """To modify board order of a PlayGroup"""
  reorderPlayGroup(boardIds: [String!]!, id: String!): PlayGroup!

  """To reset password to default"""
  resetPasswordToDefault(username: String!): Boolean!

  """To revert Board version"""
  revertBoardVersion(id: String!, version: Float!): Board!

  """
  To run new scenario instance and will return the result after the scenario stop.
  """
  runScenario(instanceName: String, scenarioName: String!, variables: Object): ScenarioInstanceRunResult!
  sendInvitation(email: EmailAddress!, reference: String!, type: String!): Invitation!
  singleUpload(file: Upload!): Attachment!

  """To start new scenario instance"""
  startScenario(instanceName: String, scenarioName: String!, variables: Object): ScenarioInstance!

  """To start posting scenario based on the schedule of the given scenario"""
  startScenarioSchedule(scenarioId: String!): Scenario!

  """To start new scenario instance"""
  stopScenario(instanceName: String): ScenarioInstance

  """To stop posting scenario based on the schedule of the given scenario"""
  stopScenarioSchedule(scenarioId: String!): Scenario

  """To subscribe azure active directory users"""
  subscribeAzureADUsers: Boolean!

  """To subscribe google users"""
  subscribeGoogleUsers: Boolean!

  """To synchronize auth-providers users"""
  synchronizeAuthProviderUsers(id: String!): Boolean!

  """
  To synchronize privilege master from graphql directives. Only superuser is permitted.
  """
  synchronizePrivilegeMaster(privilege: NewPrivilege!): Boolean!
  terminateContract(partnerName: String!): Boolean!

  """To transfer owner of domain"""
  transferOwner(username: String!): Boolean!
  unregisterSchedule(handle: ID!): Boolean!
  updateAppliance(id: String!, patch: AppliancePatch!): Appliance!
  updateApplication(id: String!, patch: ApplicationPatch!): Application!

  """To modify ApprovalLine information"""
  updateApprovalLine(id: String!, patch: ApprovalLinePatch!): ApprovalLine!
  updateAttachment(id: String!, patch: AttachmentPatch!): Attachment!

  """To modify AttributeSet information"""
  updateAttributeSet(id: String!, patch: AttributeSetPatch!): AttributeSet!

  """To modify AuthProvider information"""
  updateAuthProvider(id: String!, patch: AuthProviderPatch!): AuthProvider!

  """To modify Board information"""
  updateBoard(id: String!, patch: BoardPatch!): Board!

  """To modify BoardTemplate information"""
  updateBoardTemplate(id: String!, patch: BoardTemplatePatch!): BoardTemplate!

  """To modify CommonCode information"""
  updateCommonCode(name: String!, patch: CommonCodePatch!): CommonCode!

  """To modify CommonCodeDetail information"""
  updateCommonCodeDetail(id: String!, patch: CommonCodeDetailPatch!): CommonCodeDetail!

  """To modify connection information"""
  updateConnection(name: String!, patch: ConnectionPatch!): Connection!

  """To modify Contact information"""
  updateContact(id: String!, patch: ContactPatch!): Contact!

  """To modify Department information"""
  updateDepartment(id: String!, patch: DepartmentPatch!): Department!

  """To update domain (Only superuser is granted this privilege.)"""
  updateDomain(name: String!, patch: DomainPatch!): Domain!

  """To modify DomainLink information"""
  updateDomainLink(id: String!, patch: DomainLinkPatch!): DomainLink!

  """To update multiple domains (Only superuser is granted this privilege.)"""
  updateDomains(patches: [DomainPatch!]!): Boolean!

  """
  Updates the details of an existing employee identified by the given ID. Optionally updates the supervisor, department, system user, and photo associated with the employee.
  """
  updateEmployee(id: String!, patch: EmployeePatch!): Employee!

  """To modify Entity' information"""
  updateEntity(id: String!, patch: EntityPatch!): Entity!

  """To modify EntityColumn information"""
  updateEntityColumn(id: String!, patch: EntityColumnPatch!): EntityColumn!

  """To modify Font information"""
  updateFont(id: String!, patch: FontPatch!): Font!

  """To modify Group information"""
  updateGroup(id: String!, patch: GroupPatch!): Group!

  """To modify Menu information"""
  updateMenu(id: String!, patch: MenuPatch!): Menu!

  """To modify MenuButton information"""
  updateMenuButton(id: String!, patch: MenuButtonPatch!): MenuButton!

  """To modify MenuColumn information"""
  updateMenuColumn(id: String!, patch: MenuColumnPatch!): MenuColumn!

  """To modify MenuDetail information"""
  updateMenuDetail(id: String!, patch: MenuDetailPatch!): MenuDetail!

  """To modify MenuDetailButton information"""
  updateMenuDetailButton(id: String!, patch: MenuDetailButtonPatch!): MenuDetailButton!

  """To modify MenuDetailColumn information"""
  updateMenuDetailColumn(id: String!, patch: MenuDetailColumnPatch!): MenuDetailColumn!

  """To modify multiple ApprovalLines' information"""
  updateMultipleApprovalLine(patches: [ApprovalLinePatch!]!): [ApprovalLine!]!

  """To modify multiple AttributeSets' information"""
  updateMultipleAttributeSet(patches: [AttributeSetPatch!]!): [AttributeSet!]!
  updateMultipleAuthProvider(patches: [AuthProviderPatch!]!): [AuthProvider!]!

  """To modify multiple CommonCodes' information"""
  updateMultipleCommonCode(patches: [CommonCodePatch!]!): [CommonCode!]!

  """To modify multiple CommonCodeDetails' information"""
  updateMultipleCommonCodeDetail(patches: [CommonCodeDetailPatch!]!): [CommonCodeDetail!]!

  """To modify multiple connections' information"""
  updateMultipleConnection(patches: [ConnectionPatch!]!): [Connection!]!

  """To modify multiple Contacts' information"""
  updateMultipleContact(patches: [ContactPatch!]!): [Contact!]!

  """To modify multiple Departments' information"""
  updateMultipleDepartment(patches: [DepartmentPatch!]!): [Department!]!

  """To modify multiple DomainLinks' information"""
  updateMultipleDomainLink(patches: [DomainLinkPatch!]!): [DomainLink!]!

  """
  Updates or creates multiple employee records based on the provided patches. New employees are created if the "cuFlag" is "+", and existing employees are updated if the "cuFlag" is "M".
  """
  updateMultipleEmployee(patches: [EmployeePatch!]!): [Employee!]!

  """To modify multiple Entitys' information"""
  updateMultipleEntity(patches: [EntityPatch!]!): [Entity!]!

  """To modify multiple Entitys' information"""
  updateMultipleEntityColumn(patches: [EntityColumnPatch!]!): [EntityColumn!]!

  """To modify multiple Menus' information"""
  updateMultipleMenu(patches: [MenuPatch!]!): [Menu!]!

  """To modify multiple ApprovalLines' information for current user"""
  updateMultipleMyApprovalLine(patches: [ApprovalLinePatch!]!): [ApprovalLine!]!

  """To modify multiple Notificationes' information"""
  updateMultipleNotification(patches: [NotificationPatch!]!): [Notification!]!

  """To modify multiple NotificationRules' information"""
  updateMultipleNotificationRule(patches: [NotificationRulePatch!]!): [NotificationRule!]!

  """To modify multiple PDFReleases' information"""
  updateMultiplePDFRelease(patches: [PDFReleasePatch!]!): [PDFRelease!]!

  """To modify multiple PDFTemplates' information"""
  updateMultiplePDFTemplate(patches: [PDFTemplatePatch!]!): [PDFTemplate!]!

  """To modify multiple PartnerSettings' information"""
  updateMultiplePartnerSetting(patches: [PartnerSettingPatch!]!): [PartnerSetting!]!

  """To modify multiple PayloadLogs' information"""
  updateMultiplePayloadLog(patches: [PayloadLogPatch!]!): [PayloadLog!]!

  """To modify multiple PrinterDevices' information"""
  updateMultiplePrinterDevice(patches: [PrinterDevicePatch!]!): [PrinterDevice!]!

  """To modify multiple scenarios' information"""
  updateMultipleScenario(patches: [ScenarioPatch!]!): [Scenario!]!

  """To modify multiple Settings' information"""
  updateMultipleSetting(patches: [SettingPatch!]!): [Setting!]!

  """To modify multiple StateRegisters' information"""
  updateMultipleStateRegister(patches: [StateRegisterPatch!]!): [StateRegister!]!

  """To modify multiple steps' in a scenario"""
  updateMultipleStep(patches: [StepPatch!]!, scenarioId: String!): [Step!]!

  """To modify multiple Terminologies' information"""
  updateMultipleTerminologies(patches: [TerminologyPatch!]!): [Terminology!]!

  """To modify multiple Themes' information"""
  updateMultipleTheme(patches: [ThemePatch!]!): [Theme!]!

  """To modify multiple users information"""
  updateMultipleUser(patches: [UserPatch!]!): [User!]!

  """To modify ApprovalLine information for current user"""
  updateMyApprovalLine(id: String!, patch: ApprovalLinePatch!): ApprovalLine!

  """To create or update my PagePreference"""
  updateMyPagePreference(element: String!, page: String!, preference: Object!): PagePreference!

  """To create or update my preference"""
  updateMyUserPreference(key: String!, preference: Object!): UserPreference!

  """To modify Notification information"""
  updateNotification(id: String!, patch: NotificationPatch!): Notification!

  """To modify NotificationRule information"""
  updateNotificationRule(id: String!, patch: NotificationRulePatch!): NotificationRule!

  """To modify Oauth2Client information"""
  updateOauth2Client(id: String!, patch: Oauth2ClientPatch!): Oauth2Client!

  """To modify PDFRelease information"""
  updatePDFRelease(id: String!, patch: PDFReleasePatch!): PDFRelease!

  """To modify PDFTemplate information"""
  updatePDFTemplate(id: String!, patch: PDFTemplatePatch!): PDFTemplate!

  """To modify PayloadLog information"""
  updatePayloadLog(id: String!, patch: PayloadLogPatch!): PayloadLog!

  """To modify PlayGroup information"""
  updatePlayGroup(id: String!, patch: PlayGroupPatch!): PlayGroup!

  """To modify PrinterDevice information"""
  updatePrinterDevice(id: String!, patch: PrinterDevicePatch!): PrinterDevice!

  """To modify privilege information"""
  updatePrivilege(category: String!, name: String!, patch: PrivilegePatch!): Privilege!

  """To modify role information"""
  updateRole(id: String!, patch: RolePatch!): Role!

  """To update role Menu"""
  updateRoleMenu(isCheckedMenu: Boolean!, roleId: String!, targetMenuId: String!): Menu!

  """To update role Menu"""
  updateRoleMenus(isCheckedAll: Boolean!, parentMenuId: String!, roleId: String!): [Menu!]!

  """To modify scenario information"""
  updateScenario(name: String!, patch: ScenarioPatch!): Scenario!
  updateSchedule(schedule: SchedulePatch!): ID!

  """To update secure IP list for domain"""
  updateSecureIPList(iplist: Object!): Object

  """To modify Setting information"""
  updateSetting(name: String!, patch: SettingPatch!): Setting!

  """To modify StateRegister information"""
  updateStateRegister(id: String!, patch: StateRegisterPatch!): StateRegister!

  """To update state of StateRegister by name"""
  updateStateRegisterByName(name: String!, state: Object!): StateRegister!

  """To modify Terminology information"""
  updateTerminology(id: String!, patch: TerminologyPatch!): Terminology!

  """To modify Theme information"""
  updateTheme(id: String!, patch: ThemePatch!): Theme!

  """To modify user information"""
  updateUser(email: EmailAddress!, patch: UserPatch!): User!

  """To modify UserPreference information"""
  updateUserPreference(id: String!, patch: UserPreferencePatch!): UserPreference!

  """To update roles for a user"""
  updateUserRoles(availableRoles: [ObjectRef!]!, selectedRoles: [ObjectRef!]!, username: String!): User!
}

input NewAppliance {
  brand: String!
  description: String
  model: String!
  name: String!
  netmask: String
  serialNo: String!
}

input NewApplication {
  description: String
  email: EmailAddress
  icon: String
  name: String!
  redirectUrl: String
  type: ApplicationType
  url: String
  webhook: String
}

input NewApprovalLine {
  description: String
  model: Object
  name: String!
  owner: ObjectRefApprovalLineOwnerType!
  ownerType: ApprovalLineOwnerType!
}

input NewAttachment {
  category: String
  description: String
  file: Upload!
  refBy: String
  refType: String
  tags: Object
}

input NewAttributeSet {
  active: Boolean
  description: String
  entity: String!
  items: [AttributeSetItemPatch!]
}

input NewAuthProvider {
  active: Boolean
  clientId: String
  clientSecret: String
  params: Object
  privateKey: String
  tenantId: String
  type: String!
}

input NewBoard {
  description: String
  groupId: String
  model: String!
  name: String!
  thumbnail: String
}

input NewBoardTemplate {
  description: String!
  model: String!
  name: String!
  thumbnail: String
  visibility: String!
}

input NewCommonCode {
  description: String
  details: [String!]
  name: String!
}

input NewCommonCodeDetail {
  commonCode: ObjectRef!
  description: String
  labels: Object
  name: String!
  rank: Float!
}

input NewConnection {
  description: String
  edge: ObjectRef
  endpoint: String
  name: String!
  params: Object
  type: String
}

input NewContact {
  address: String
  company: String
  department: String
  email: EmailAddress
  items: [ContactItemPatch!]
  name: String!
  note: String
  phone: String
  profile: ProfileInput
}

input NewDepartment {
  active: Boolean
  controlNo: String!
  description: String
  extension: String
  manager: ObjectRefForEmployee
  name: String!
  parent: ObjectRef
  picture: Upload
}

input NewDomainLink {
  sourceDomain: ObjectRef!
  targetDomain: ObjectRef!
  type: String!
}

input NewEmployee {
  active: Boolean
  alias: String
  bankAccount: String
  bankName: String
  contact: ObjectRefForContact
  controlNo: String!
  department: ObjectRefForDepartment
  emergencyContact: String
  emergencyContactPhone: String
  extension: String
  hiredOn: DateTimeISO
  jobPosition: String
  jobResponsibility: String
  name: String!
  note: String
  photo: Upload
  retiredOn: DateTimeISO
  supervisor: ObjectRefForEmployee
  type: EmployeeType
  user: ObjectRefForUser
}

input NewEntity {
  active: Boolean
  association: String
  bundle: String!
  columns: [String!]
  dataProp: String
  delStrategy: String
  description: String
  extEntity: Boolean
  fixedColumns: Int
  idField: String
  idType: String
  master: String
  multiSaveUrl: String
  name: String!
  refField: String
  searchUrl: String
  tableName: String!
  titleField: String
}

input NewEntityColumn {
  colSize: Float
  colType: String!
  defVal: String
  description: String
  entity: ObjectRef!
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Int
  gridValidator: String
  gridWidth: Int
  ignoreOnSav: Boolean
  name: String!
  nullable: Boolean
  rangeVal: String
  rank: Float
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Int
  sortRank: Int
  term: String
  uniqRank: Int
  virtualField: Boolean
}

input NewFavorite {
  routing: String!
}

input NewFont {
  active: Boolean
  files: [Upload!]
  name: String!
  path: String
  provider: String
  uri: String
}

input NewGroup {
  description: String
  name: String!
}

input NewMenu {
  buttons: [ObjectRef!]
  category: String
  children: [ObjectRef!]
  columns: [ObjectRef!]
  description: String
  detailFormId: String
  detailLayout: String
  fixedColumns: Int
  gridSaveUrl: String
  hiddenFlag: Boolean
  iconPath: String
  idField: String
  itemsProp: String
  menuType: String!
  name: String!
  pagination: Boolean
  parent: ObjectRef
  rank: Int
  resourceId: String
  resourceName: String
  resourceType: String
  resourceUrl: String
  role: ObjectRef
  routing: String
  routingType: String
  template: String
  titleField: String
  totalProp: String
}

input NewMenuButton {
  auth: String
  icon: String
  logic: String
  menu: String!
  rank: Int
  style: String
  text: String!
}

input NewMenuColumn {
  colSize: Int
  colType: String!
  defVal: String
  description: String
  extField: Boolean
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Int
  gridValidator: String
  gridWidth: Int
  ignoreOnSave: Boolean
  menu: String!
  name: String!
  nullable: Boolean
  rangeVal: String
  rank: Int
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Int
  sortRank: Int
  term: String
  uniqRank: Int
  virtualField: Boolean
}

input NewMenuDetail {
  association: String
  buttons: [String!]
  columns: [String!]
  customView: String
  dataProp: String
  entityId: String
  masterField: String
  menu: String!
  name: String!
  saveUrl: String
  searchUrl: String
  viewSection: String!
}

input NewMenuDetailButton {
  icon: String
  logic: String
  menuDetail: String!
  rank: Int
  style: String
  text: String!
}

input NewMenuDetailColumn {
  colSize: Int
  colType: String
  defVal: String
  description: String
  extField: Boolean
  formEditor: String
  formFormat: String
  formValidator: String
  gridAlign: String
  gridEditor: String
  gridFormat: String
  gridRank: Int
  gridValidator: String
  gridWidth: Int
  ignoreOnSave: Boolean
  menuDetail: String
  name: String
  nullable: Boolean
  rangeVal: String
  rank: Int
  refName: String
  refParams: String
  refRelated: String
  refType: String
  refUrl: String
  reverseSort: Boolean
  searchEditor: String
  searchInitVal: String
  searchName: String
  searchOper: String
  searchRank: Int
  sortRank: Int
  term: String
  uniqRank: Int
  virtualField: Boolean
}

input NewNotification {
  body: String
  image: String
  ownerId: String
  property: Object
  subject: String
  timestamp: DateTimeISO
  title: String
  type: String
  url: String
}

input NewNotificationRule {
  active: Boolean
  body: String
  description: String
  name: String!
  state: NotificationRuleStatus
  thumbnail: Upload
  title: String
  url: String
}

input NewOauth2Client {
  accessToken: String
  accessTokenUrl: String
  authUrl: String
  callbackUrl: String
  clientId: String
  clientSecret: String
  codeChallengeMethod: String
  codeVerifier: String
  description: String
  grantType: String
  icon: String
  jwtToken: JWT
  name: String!
  password: String
  refreshToken: String
  scopes: String
  username: String
  webhook: String
}

input NewPDFRelease {
  active: Boolean
  description: String
  name: String!
  params: String
  state: PDFReleaseStatus
}

input NewPDFTemplate {
  active: Boolean
  content_template: String
  cover_template: String
  description: String
  footer_template: String
  header_template: String
  last_template: String
  name: String!
  page_size: String = "A4"
  state: PDFTemplateStatus
  watermark: String
}

input NewPagePreference {
  element: String
  page: String
  preference: Object!
  user: ObjectRef!
}

input NewPayloadLog {
  description: String
  name: String!
}

input NewPlayGroup {
  description: String
  name: String!
}

input NewPrinterDevice {
  activeFlag: Boolean
  defaultFlag: Boolean
  description: String!
  dpi: Int
  jobCategory: String
  jobClass: String
  jobType: String
  name: String!
  note: String
  printerDriver: String
  printerIp: String
  printerPort: Int
  serviceUrl: String
  status: String
  type: String
}

input NewPrivilege {
  category: String!
  description: String
  name: String!
  roles: [ObjectRef!]
}

input NewRole {
  description: String
  name: String!
  privileges: [ObjectRef!]
  users: [ObjectRef!]
}

input NewScenario {
  active: Boolean
  description: String
  name: String!
  role: ObjectRef
  schedule: String
  timezone: String
  ttl: Float
  type: String
}

input NewSchedule {
  client: ScheduleClientInput!
  name: String!
  schedule: String
  task: ScheduleTaskInput!
  timezone: String
  type: String!
}

input NewSetting {
  category: String!
  description: String
  name: String!
  value: String
}

input NewStateRegister {
  """Description of the state register"""
  description: String

  """Group name for the state register"""
  group: String

  """Name of the state register"""
  name: String!

  """Number of decimal places if the state is a number type"""
  place: String

  """
  Reference to an external entity or data, used as a flexible foreign key
  """
  refBy: String

  """Current state value"""
  state: Object

  """Time to live for the state value in seconds"""
  ttl: Int

  """Type of the state"""
  type: String

  """Unit of the state value"""
  unit: String
}

input NewTerminology {
  category: String!
  description: String
  display: String!
  locale: String!
  name: String!
}

input NewTheme {
  active: Boolean
  description: String
  name: String!
  type: String
  value: Object
}

input NewUser {
  description: String
  email: EmailAddress!
  name: String!
  password: String
  roles: [ObjectRef!]
  userType: String
  username: String!
}

input NewUserByDomainWizardInput {
  email: EmailAddress!
  isInvitee: Boolean
  name: String!
  owner: Boolean!
  password: String
  roles: [NewRole!]!
}

input NewUserPreference {
  key: String!
  preference: Object!
  user: ObjectRef!
}

"""Entity for Notification"""
type Notification {
  body: String
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  id: ID!
  image: String
  owner: User
  property: Object
  state: String
  subject: String
  timestamp: Date
  title: String
  type: String
  updatedAt: DateTimeISO
  updater: User
  url: String
}

type NotificationList {
  items: [Notification!]!
  total: Int!
}

input NotificationPatch {
  cuFlag: String
  id: ID
  state: NotificationStatus
}

"""Entity for NotificationRule"""
type NotificationRule {
  body: String
  channels: String
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  description: String
  domain: Domain!
  id: ID!
  name: String

  """notification recipients."""
  recipients: [RecipientItem!]
  state: String
  thumbnail: String
  title: String
  updatedAt: DateTimeISO
  updater: User
  url: String
  version: Float
}

type NotificationRuleList {
  items: [NotificationRule!]!
  total: Int!
}

input NotificationRulePatch {
  body: String
  cuFlag: String
  description: String
  id: ID
  name: String
  state: NotificationRuleStatus
  thumbnail: Upload
  title: String
  url: String
}

"""state enumeration of a notificationRule"""
enum NotificationRuleStatus {
  DRAFT
  RELEASED
}

"""state enumeration of a notification"""
enum NotificationStatus {
  NOTREAD
  READ
}

"""Entity for Oauth2Client"""
type Oauth2Client {
  accessToken: String
  accessTokenUrl: String
  authUrl: String
  callbackUrl: String
  clientId: String
  clientSecret: String
  codeChallengeMethod: String
  codeVerifier: String
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  expires: DateTimeISO
  grantType: String
  icon: String
  id: ID!
  jwtToken: JWT
  name: String!
  password: String
  refreshToken: String
  scopes: String
  state: String
  tokenType: String
  updatedAt: DateTimeISO
  updater: User
  username: String
  webhook: String
}

type Oauth2ClientList {
  items: [Oauth2Client!]!
  total: Int!
}

input Oauth2ClientPatch {
  accessToken: String
  accessTokenUrl: String
  authUrl: String
  callbackUrl: String
  clientId: String
  clientSecret: String
  codeChallengeMethod: String
  codeVerifier: String
  description: String
  grantType: String
  icon: String
  jwtToken: JWT
  name: String
  password: String
  refreshToken: String
  scopes: String
  username: String
  webhook: String
}

"""Can be anything"""
scalar Object

input ObjectRef {
  """Field description"""
  description: String

  """Field id"""
  id: ID!

  """Field name"""
  name: String
}

input ObjectRefApprovalLineOwnerType {
  controlNo: String

  """Field description"""
  description: String

  """Field id"""
  id: ID!

  """Field name"""
  name: String
}

input ObjectRefForContact {
  address: String

  """Field description"""
  description: String
  email: EmailAddress

  """Field id"""
  id: ID!

  """Field name"""
  name: String
  phone: String
}

input ObjectRefForDepartment {
  controlNo: String

  """Field description"""
  description: String

  """Field id"""
  id: ID!

  """Field name"""
  name: String
}

input ObjectRefForEmployee {
  active: Boolean
  alias: String
  controlNo: String

  """Field description"""
  description: String
  email: EmailAddress
  hiredOn: DateTimeISO

  """Field id"""
  id: ID!
  jobPosition: String
  jobResponsibility: String

  """Field name"""
  name: String
  photo: String
  type: EmployeeType
}

input ObjectRefForUser {
  """Field description"""
  description: String
  email: EmailAddress

  """Field id"""
  id: ID!

  """Field name"""
  name: String
}

type OrgMemberTarget {
  controlNo: String

  """Field description"""
  description: String

  """Field id"""
  id: ID!

  """Field name"""
  name: String
}

"""type enumeration of a approval line item"""
enum OrgMemberTargetType {
  Department
  Employee
  MyDepartment
  MySupervisor
  Myself
  Role
}

"""Entity for PDFRelease"""
type PDFRelease {
  active: Boolean
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  description: String
  domain: Domain
  filePath: String
  fileUrl: String
  id: ID!
  name: String
  state: String
  template: PDFTemplate!
  templateId: String!
  updatedAt: DateTimeISO
  updater: User
}

type PDFReleaseList {
  items: [PDFRelease!]!
  total: Int!
}

input PDFReleasePatch {
  active: Boolean
  cuFlag: String
  description: String
  id: ID
  name: String
  state: PDFReleaseStatus
}

"""state enumeration of a PDFRelease"""
enum PDFReleaseStatus {
  failed
  published
}

"""Entity for PDFTemplate"""
type PDFTemplate {
  active: Boolean
  content_template: String
  cover_template: String
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain
  footer_template: String
  header_template: String
  id: ID!
  last_template: String
  name: String
  page_size: String
  state: String
  updatedAt: DateTimeISO
  updater: User
  watermark: String
}

type PDFTemplateList {
  items: [PDFTemplate!]!
  total: Int!
}

input PDFTemplatePatch {
  active: Boolean
  content_template: String
  cover_template: String
  cuFlag: String
  description: String
  footer_template: String
  header_template: String
  id: ID
  last_template: String
  name: String
  page_size: String = "A4"
  state: PDFTemplateStatus
}

"""state enumeration of a PDF Template"""
enum PDFTemplateStatus {
  draft
  released
}

"""Entity for PagePreference"""
type PagePreference {
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  element: String
  id: ID!
  page: String
  preference: Object
  updatedAt: DateTimeISO
  updater: User
  user: User!
}

type PagePreferenceList {
  items: [PagePreference!]!
  total: Int!
}

input Pagination {
  limit: Int
  page: Int
}

type Partner {
  approvedAt: DateTimeISO
  approver: User
  domain: Domain!
  id: ID!
  partnerDomain: Domain!
  requestedAt: DateTimeISO
  requester: User
}

type PartnerList {
  items: [Partner!]
  total: Int
}

"""Entity for PartnerSetting"""
type PartnerSetting {
  category: String
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  name: String
  partnerDomain: Domain
  partnerDomainId: String
  setting: Setting
  settingId: String
  updatedAt: DateTimeISO
  updater: User
  value: String
}

type PartnerSettingList {
  items: [PartnerSetting!]!
  total: Int!
}

input PartnerSettingPatch {
  cuFlag: String!
  id: ID
  partnerDomain: ObjectRef
  setting: ObjectRef
  value: String
}

type PasswordRule {
  allowRepeat: Boolean
  digit: Boolean
  looseCharacterLength: Float
  lowerCase: Boolean
  specialCharacter: Boolean
  tightCharacterLength: Float
  upperCase: Boolean
  useLoosePattern: Boolean
  useTightPattern: Boolean
}

"""Entity for PayloadLog"""
type PayloadLog {
  createdAt: DateTimeISO
  creator: User
  domain: Domain!
  endpoint: String!
  id: ID!
  name: String!
  request: String!
  response: String!
  src: String
  type: String!
  updatedAt: DateTimeISO
  updater: User
}

type PayloadLogList {
  items: [PayloadLog!]!
  total: Int!
}

input PayloadLogPatch {
  cuFlag: String!
  description: String
  id: ID
  name: String
}

type PendingObject {
  due: String!
  priority: Int!
  stuff: Object!
  tag: String
}

"""Entity for Board PlayGroup"""
type PlayGroup {
  boards: [Board!]
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain
  id: ID!
  name: String!
  updatedAt: DateTimeISO
  updater: User
}

type PlayGroupList {
  items: [PlayGroup!]!
  total: Int!
}

input PlayGroupPatch {
  description: String
  name: String
}

"""Entity for PrinterDevice"""
type PrinterDevice {
  activeFlag: Boolean
  createdAt: DateTimeISO
  creator: User
  defaultFlag: Boolean
  description: String!
  domain: Domain!
  dpi: Int
  id: ID!
  jobCategory: String
  jobClass: String
  jobType: String
  name: String!
  note: String
  printerDriver: String
  printerIp: String
  printerPort: Int
  serviceUrl: String
  status: String
  type: String!
  updatedAt: DateTimeISO
  updater: User
}

type PrinterDeviceList {
  items: [PrinterDevice!]!
  total: Int!
}

input PrinterDevicePatch {
  activeFlag: Boolean
  cuFlag: String!
  defaultFlag: Boolean
  description: String
  dpi: Int
  id: ID
  jobCategory: String
  jobClass: String
  jobType: String
  name: String
  note: String
  printerDriver: String
  printerIp: String
  printerPort: Int
  serviceUrl: String
  status: String
  type: String
}

type Privilege {
  category: String
  createdAt: DateTimeISO
  creator: User
  description: String
  id: ID!
  name: String!
  privilege: String!
  roles: [Role!]
  updatedAt: DateTimeISO
  updater: User
}

type PrivilegeList {
  items: [Privilege!]
  total: Int
}

type PrivilegeObject {
  category: String
  owner: Boolean
  privilege: String
  super: Boolean
}

input PrivilegePatch {
  category: String
  description: String
  id: String
  name: String
  roles: [ObjectRef!]
}

"""Object type for Profile"""
type Profile {
  left: Float
  picture: String
  top: Float
  zoom: Float
}

"""Input type for Profile"""
input ProfileInput {
  file: Upload
  left: Float
  picture: String
  top: Float
  zoom: Float
}

type PropertySpec {
  label: String!
  name: String!
  placeholder: String
  property: Object
  styles: Object
  type: String!
}

type Query {
  APIDocCompletion(input: APIDocCompletionInput!): APIDocCompletionOutput!

  """To fetch a PDFTemplate"""
  PDFTemplate(id: String!): PDFTemplate

  """To fetch multiple PDFTemplates"""
  PDFTemplates(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PDFTemplateList!
  appBinding(id: String!): AppBinding!
  appBindings(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): AppBindingList!

  """ To fetch appliance"""
  appliance(id: String!): Appliance!

  """To fetch multiple appliance"""
  appliances(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ApplianceList!

  """To fetch application"""
  application(id: String!): Application!

  """To fetch multiple application"""
  applications(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ApplicationList!

  """To fetch a approval line"""
  approvalLine(id: String!): ApprovalLine

  """To fetch referable approval lines for the user"""
  approvalLineReferences(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ApprovalLineList!

  """To fetch multiple approval lines"""
  approvalLines(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ApprovalLineList!
  attachment(id: String!): Attachment!
  attachments(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): AttachmentList!

  """To fetch a AttributeSet"""
  attributeSet(id: String!): AttributeSet

  """To fetch a AttributeSet by Entity name"""
  attributeSetByEntity(entity: String!): AttributeSet

  """To fetch multiple AttributeSets"""
  attributeSets(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): AttributeSetList!

  """To fetch a AuthProvider"""
  authProvider(id: String!): AuthProvider

  """To fetch a AuthProvider"""
  authProviderTypes: AuthProviderTypeList

  """To fetch multiple AuthProviders"""
  authProviders(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): AuthProviderList!

  """To fetch a board"""
  board(id: String!): Board!

  """To fetch a Board Model by name"""
  boardByName(name: String!): Board

  """To fetch the latest Board published"""
  boardPublished(id: String!): BoardHistory!

  """To fetch a BoardTemplate"""
  boardTemplate(id: String!): BoardTemplate

  """To fetch multiple BoardTemplates"""
  boardTemplates(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): BoardTemplateList!

  """To fetch BoardTemplates created by me"""
  boardTemplatesCreatedByMe(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): BoardTemplateList!

  """To fetch a Board Versions"""
  boardVersions(id: String!): [BoardHistory!]!

  """To fetch multiple Boards"""
  boards(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): BoardList!

  """To fetch Boards created by me"""
  boardsCreatedByMe(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): BoardList!
  chatCompletion(input: ChatCompletionInput!): ChatCompletionOutput!

  """
  Checks if the system is configured to provide a default password for new users.
  """
  checkDefaultPassword: Boolean!

  """
  Determines whether the system provides a default password when creating a new user.
  """
  checkResettablePasswordToDefault: Boolean!

  """To fetch the preset of role for new user"""
  checkRolePreset: [Role!]!

  """
  Checks if the current authenticated user belongs to the current domain.
  """
  checkUserBelongsDomain: Boolean!

  """Checks if a user with the given email address exists in the system."""
  checkUserExistence(email: EmailAddress!): Boolean!

  """To fetch common approval lines"""
  commonApprovalLines(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ApprovalLineList!

  """To fetch a CommonCode"""
  commonCode(name: String!): CommonCode

  """To fetch a CommonCodeDetail"""
  commonCodeDetail(id: String!): CommonCodeDetail!

  """To fetch multiple CommonCodeDetails"""
  commonCodeDetails(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): CommonCodeDetailList!

  """To fetch multiple CommonCodes"""
  commonCodes(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): CommonCodeList!

  """To fetch a connector"""
  connection(name: String!): ConnectorType!

  """To fetch multiple connections"""
  connections(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ConnectionList!

  """To fetch the connector from a connection"""
  connectorByConnection(connectionName: String!): ConnectorType!

  """To fetch multiple connector"""
  connectors: ConnectorList!

  """To fetch a Contact"""
  contact(id: String!): Contact

  """To fetch multiple Contacts"""
  contacts(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ContactList!
  customers: [Domain!]!
  decipherCode(input: CodeDecipherInput!): CodeDecipherOutput!
  decipherErrorCode(input: CodeDecipherInput!): CodeDecipherOutput!

  """To fetch a Department"""
  department(id: String!): Department

  """To fetch a Root Departments"""
  departmentRoots(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): DepartmentList

  """To fetch multiple Departments"""
  departments(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): DepartmentList!

  """To fetch domain"""
  domain(id: String!): Domain!

  """To fetch multiple DomainLinks"""
  domainLinks(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): DomainLinkList!

  """To fetch domain"""
  domainTypes: [String!]!

  """To fetch all domains (Only superuser is granted this privilege.)"""
  domains(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): DomainList!

  """To fetch domains with given privilege for user"""
  domainsWithPrivilege(category: String!, privilege: String!): [Domain!]!

  """To fetch multiple appliance"""
  edges(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ApplianceList!

  """
  Fetches a specific employee by their unique ID. Returns the employee object if found, or null if not found.
  """
  employee(id: String!): Employee

  """
  Fetches a list of employees based on provided query parameters. Supports searching by name, control number, and alias.
  """
  employees(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): EmployeeList!

  """To fetch multiple Entities"""
  entities(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): EntityList!

  """To fetch a Entity"""
  entity(id: String!): Entity!

  """To fetch a EntityColumn"""
  entityColumn(id: String!): EntityColumn!

  """To fetch multiple EntityColumns"""
  entityColumns(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): EntityColumnList!

  """To fetch a EntityMetadata"""
  entityMetadata(name: String!): EntityMetadata!

  """To fetch a Favorite"""
  favorite(id: String!): Favorite!

  """To fetch multiple BoardFavorites"""
  favoriteBoards(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): BoardFavoriteList!

  """To fetch multiple Favorites"""
  favorites(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): FavoriteList!

  """To fetch the state of a connection"""
  fetchConnectionState(name: String!): ConnectionState!

  """To fetch a Font"""
  font(id: String!): Font!

  """To fetch multiple Fonts"""
  fonts(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): FontList!
  grantedRoles: [GrantedRole!]!
  grantingRoles(customerId: String!): [GrantedRole!]!

  """To fetch a Group"""
  group(id: String!): Group

  """To fetch multiple Groups"""
  groups(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): GroupList!

  """To query whether I have the given permission"""
  hasPrivilege(category: String!, privilege: String!): Boolean!
  i18nCompletion(input: i18nCompletionInput!): i18nCompletionOutput!
  imageCompletion(input: ImageCompletionInput!): ImageCompletionOutput!

  """To fetch integration Analyses"""
  integrationAnalysis: Object!
  invitation(email: EmailAddress!, reference: String!, type: String!): Invitation!
  invitations(reference: String!, type: String!): InvitationList!

  """To fetch multiple LoginHistories"""
  loginHistories(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): LoginHistoryList!

  """To fetch a Menu"""
  menu(id: String!): Menu!

  """To fetch a MenuButton"""
  menuButton(id: String!): MenuButton!

  """To fetch multiple MenuButtons"""
  menuButtons(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): MenuButtonList!

  """To fetch a Menu by routing"""
  menuByRouting(routing: String!): Menu!

  """To fetch a MenuColumn"""
  menuColumn(id: String!): MenuColumn!

  """To fetch multiple MenuColumns"""
  menuColumns(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): MenuColumnList!

  """To fetch a MenuDetail"""
  menuDetail(id: String!): MenuDetail!

  """To fetch a MenuDetailButton"""
  menuDetailButton(id: String!): MenuDetailButton!

  """To fetch multiple MenuDetailButtons"""
  menuDetailButtons(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): MenuDetailButtonList!

  """To fetch a MenuDetailColumn"""
  menuDetailColumn(id: String!): MenuDetailColumn!

  """To fetch multiple MenuDetailColumns"""
  menuDetailColumns(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): MenuDetailColumnList!

  """To fetch multiple MenuDetails"""
  menuDetails(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): MenuDetailList!

  """To fetch multiple Menus"""
  menus(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): MenuList!

  """To fetch approval lines only for to the user"""
  myApprovalLines(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ApprovalLineList!

  """To fetch current user's Favorites"""
  myFavorites: [Favorite!]!
  myLoginHistories(limit: Float!): [LoginHistory!]!

  """To fetch my own Menus"""
  myMenus(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): MenuList!

  """To fetch my notifications"""
  myNotifications(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): NotificationList!

  """To fetch a User's own PagePreference"""
  myPageAllPreferences(page: String!): [PagePreference!]

  """To fetch a User's own PagePreference"""
  myPagePreference(element: String!, page: String!): PagePreference

  """To fetch multiple PagePreferences"""
  myPagePreferences(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PagePreferenceList!

  """To fetch roles of current user"""
  myRoles: [Role!]!

  """To fetch a User's own UserPreference"""
  myUserPreference(element: String!, key: String!): UserPreference

  """To fetch multiple UserPreferences"""
  myUserPreferences(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): UserPreferenceList!

  """To fetch a Notification"""
  notification(id: String!): Notification

  """To fetch a NotificationRule"""
  notificationRule(id: String!): NotificationRule

  """To fetch multiple NotificationRules"""
  notificationRules(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): NotificationRuleList!

  """To fetch multiple Notificationes"""
  notificationes(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): NotificationList!

  """To fetch a Oauth2Client"""
  oauth2Client(id: String!): Oauth2Client

  """To fetch multiple Oauth2Clients"""
  oauth2Clients(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): Oauth2ClientList!

  """To fetch a PagePreference"""
  pagePreference(id: String!): PagePreference

  """To fetch specific domain's CommonCodes by given name"""
  partnerCommonCode(name: String!, partnerDomainId: String!): CommonCode!

  """To fetch a PartnerSetting"""
  partnerSetting(name: String!, partnerDomainId: String!): PartnerSetting!

  """To fetch multiple PartnerSettings"""
  partnerSettings(filters: [Filter!]!, pagination: Pagination!, partnerDomain: ObjectRef!, sortings: [Sorting!]!): PartnerSettingList!
  partners(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PartnerList!

  """
  Retrieves the current password rule configuration for the system, such as required character types and minimum length.
  """
  passwordRule: PasswordRule!

  """To fetch a PayloadLog"""
  payloadLog(id: String!): PayloadLog!

  """To fetch multiple PayloadLogs"""
  payloadLogs(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PayloadLogList!

  """To fetch a PDFRelease"""
  pdfRelease(id: String!): PDFRelease

  """To fetch multiple PDFReleases"""
  pdfReleases(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PDFReleaseList!

  """To fetch a PlayGroup"""
  playGroup(id: String!): PlayGroup

  """To fetch a PlayGroup by name"""
  playGroupByName(name: String!): PlayGroup

  """To fetch multiple PlayGroups"""
  playGroups(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PlayGroupList!

  """To fetch a UserPreference"""
  preference(id: String!): UserPreference

  """To fetch a PrinterDevice"""
  printerDevice(id: String!): PrinterDevice!

  """To fetch multiple PrinterDevices"""
  printerDevices(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PrinterDeviceList!

  """To fetch multiple privileges"""
  privileges(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): PrivilegeList!

  """To fetch role"""
  role(name: String!): Role!

  """To fetch Menus by role"""
  roleMenus(roleId: String!): MenuList!

  """To fetch privileges of a role"""
  rolePrivileges(roleId: String!): [RolePrivilege!]!

  """To fetch multiple users"""
  roles(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): RoleList!

  """To fetch a scenario"""
  scenario(id: String!): Scenario!

  """To fetch a scenario instance"""
  scenarioInstance(instanceName: String!): ScenarioInstance!

  """To fetch multiple scenario instances"""
  scenarioInstances(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ScenarioInstanceList!

  """To fetch multiple scenarios"""
  scenarios(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ScenarioList!
  schedule(id: ID!): Schedule

  """To fetch multiple Schedules"""
  schedules(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ScheduleList!
  searchCustomers(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): DomainList!

  """To fetch domain"""
  secureIPList: Object

  """To fetch a Setting"""
  setting(name: String!, partnerDomainId: String): Setting!

  """To fetch multiple Settings"""
  settings(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): SettingList!

  """To fetch a StateRegister"""
  stateRegister(id: String!): StateRegister

  """To fetch a StateRegister by name"""
  stateRegisterByName(name: String!): StateRegister

  """To fetch multiple StateRegisters"""
  stateRegisters(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): StateRegisterList!

  """To fetch a step"""
  step(name: String!): Step!

  """To fetch multiple steps"""
  steps(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): StepList!

  """To fetch a task-type"""
  taskType(name: String!): TaskType!

  """To fetch multiple task-type"""
  taskTypes: TaskTypeList!

  """To fetch the connector from a task-type"""
  taskTypesByConnection(connectionName: String!): TaskTypeList!

  """To fetch multiple Terminologies"""
  terminologies(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): TerminologyList!

  """To fetch a Terminology"""
  terminology(id: String!): Terminology!

  """To fetch a Theme"""
  theme(id: String!): Theme

  """To fetch multiple Themes"""
  themes(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): ThemeList!

  """Fetches a user by their email address within the current domain."""
  user(email: EmailAddress!): User!

  """To fetch Menus by role"""
  userMenus: [Menu!]!

  """To fetch roles of a user"""
  userRoles(userId: String!): [UserRole!]!

  """
  Fetches a list of users based on provided search parameters within the current domain.
  """
  users(filters: [Filter!], inherited: InheritedValueType, pagination: Pagination, sortings: [Sorting!]): UserList!
  vendors: [Domain!]!
}

type RecipientItem {
  recipient: OrgMemberTarget
  type: OrgMemberTargetType
  value: String
}

type Role {
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  name: String
  privileges: [Privilege!]
  updatedAt: DateTimeISO
  updater: User
  users: [User!]
}

type RoleList {
  items: [Role!]
  total: Int
}

input RolePatch {
  cuFlag: String
  description: String
  id: String
  name: String
  privileges: [ObjectRef!]
  users: [ObjectRef!]
}

type RolePrivilege {
  assigned: Boolean
  category: String
  description: String
  id: String
  name: String
}

type Scenario {
  """[will be deprecated] automatically be started when this server start"""
  active: Boolean
  connectionNames: [Connection!]!
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  instances: [ScenarioInstance!]
  name: String!
  privilege: PrivilegeObject

  """accessible and executable system-wide"""
  public: Boolean
  publishTags: [Connection!]!
  role: Role
  schedule: String
  scheduleId: String
  state: String
  steps: [Step!]
  timezone: String
  ttl: Float
  type: String
  updatedAt: DateTimeISO
  updater: User
}

type ScenarioInstance {
  data: Object
  domain: Domain
  instanceName: String
  message: String
  progress: ScenarioInstanceProgress
  result: Object
  root: ScenarioInstance
  scenarioName: String
  state: String
  timestamp: DateTimeISO
  user: User
  variables: Object
}

type ScenarioInstanceList {
  items: [ScenarioInstance!]!
  total: Int!
}

type ScenarioInstanceProgress {
  rate: Int!
  rounds: Int!
  step: Int!
  steps: Int!
}

type ScenarioInstanceRunResult {
  data: Object
  instanceName: String
  message: String
  result: Object
  scenarioName: String
  state: String
  timestamp: DateTimeISO
  variables: Object
}

type ScenarioInstanceState {
  data: Object
  domain: Domain
  instanceName: String
  message: String
  progress: ScenarioInstanceProgress
  scenarioName: String
  state: ScenarioInstanceStatus
  timestamp: DateTimeISO
  variables: Object
}

"""state enumeration of a scenario-instance"""
enum ScenarioInstanceStatus {
  HALTED
  READY
  STARTED
  STOPPED
  UNLOADED
}

type ScenarioList {
  items: [Scenario!]!
  total: Int!
}

input ScenarioPatch {
  active: Boolean
  cuFlag: String
  description: String
  id: ID
  name: String
  role: ObjectRef
  schedule: String
  steps: [StepPatch!]
  timezone: String
  ttl: Float
  type: String
}

type ScenarioQueueState {
  domain: Domain!
  queue: [PendingObject!]!
}

type Schedule {
  client: ScheduleClient!
  id: ID!
  name: String
  schedule: String
  task: ScheduleTask!
  timezone: String
  type: String!
}

type ScheduleClient {
  application: String!
  group: String!
  key: String!
  operation: String!
  type: String!
}

input ScheduleClientInput {
  application: String!
  group: String!
  key: String!
  operation: String!
  type: String!
}

type ScheduleList {
  items: [Schedule!]!
  total: Int!
}

input SchedulePatch {
  client: ScheduleClientInput!
  id: String
  name: String
  schedule: String
  task: ScheduleTaskInput!
  timezone: String
  type: String!
}

type ScheduleTask {
  connection: ScheduleTaskConnection!
  data: Object!
  failed_policy: String!
  history_check: Boolean!
  max_retry_count: Int!
  retry_count: Int!
  retry_wait: Int!
  type: String!
}

type ScheduleTaskConnection {
  headers: Object
  host: String
  topic: String
}

input ScheduleTaskConnectionInput {
  headers: Object
  host: String
  topic: String
}

input ScheduleTaskInput {
  connection: ScheduleTaskConnectionInput!
  data: Object!
  failed_policy: String!
  history_check: Boolean!
  max_retry_count: Int!
  retry_count: Int!
  retry_wait: Int!
  type: String!
}

"""Entity for Setting"""
type Setting {
  category: String!
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain!
  id: ID!
  name: String!
  updatedAt: DateTimeISO
  updater: User
  value: String
}

type SettingList {
  items: [Setting!]!
  total: Int!
}

input SettingPatch {
  category: String
  cuFlag: String
  description: String
  id: ID
  name: String
  value: String
}

input Sorting {
  """
  Set to true if descending sort. Default is "false"
  """
  desc: Boolean

  """Field name to sort by"""
  name: String!
}

"""Entity for StateRegister"""
type StateRegister {
  """Creation time of the state register"""
  createdAt: DateTimeISO

  """User who created the state register"""
  creator: User

  """ID of the user who created the state register"""
  creatorId: String

  """Description of the state register"""
  description: String

  """Associated domain for the state register"""
  domain: Domain!

  """ID of the associated domain"""
  domainId: String!

  """Group name for the state register"""
  group: String
  id: ID!

  """Name of the state register"""
  name: String

  """Number of decimal places if the state is a number type"""
  place: String

  """
  Reference to an external entity or data, used as a flexible foreign key
  """
  refBy: String

  """Current state value"""
  state: Object

  """Time to live for the state value in seconds"""
  ttl: Int

  """Type of the state"""
  type: String

  """Unit of the state value"""
  unit: String

  """Last update time of the state register"""
  updatedAt: DateTimeISO

  """User who last updated the state register"""
  updater: User

  """ID of the user who last updated the state register"""
  updaterId: String

  """User who wrote the state"""
  writer: User

  """ID of the user who wrote the state"""
  writerId: String

  """Time when the state was recorded"""
  wroteAt: DateTimeISO
}

type StateRegisterList {
  """List of state registers"""
  items: [StateRegister!]!

  """Total number of state registers"""
  total: Int!
}

input StateRegisterPatch {
  """Flag indicating create/update operations"""
  cuFlag: String

  """Description of the state register"""
  description: String

  """Group name for the state register"""
  group: String

  """ID of the state register"""
  id: ID

  """Name of the state register"""
  name: String

  """Number of decimal places if the state is a number type"""
  place: String

  """
  Reference to an external entity or data, used as a flexible foreign key
  """
  refBy: String

  """Current state value"""
  state: Object

  """Time to live for the state value in seconds"""
  ttl: Int

  """Type of the state"""
  type: String

  """Unit of the state value"""
  unit: String
}

type Step {
  connection: String
  createdAt: DateTimeISO
  creator: User
  description: String
  domain: Domain
  id: ID!
  log: Boolean
  name: String!
  params: Object

  """
  A boolean attribute indicating the inclusion status of an element in the result
  """
  result: Boolean
  scenario: Scenario
  sequence: Float
  skip: Boolean
  task: String
  updatedAt: DateTimeISO
  updater: User
}

type StepList {
  items: [Step!]!
  total: Int!
}

input StepPatch {
  connection: String
  cuFlag: String
  description: String
  id: ID
  log: Boolean
  name: String
  params: Object
  result: Boolean
  sequence: Int
  skip: Boolean
  task: String
}

type Subscription {
  board(id: String!): Board!
  connectionLog(level: String): Log!
  connectionState(name: String): ConnectionState!
  data(tag: String!): Data!
  notification(subjects: [String!]): Notification!
  playGroup(id: String!): PlayGroup!
  scenarioInstanceLog(instanceName: String, level: String, scenarioName: String): Log!
  scenarioInstanceState(instanceName: String, scenarioName: String): ScenarioInstanceState!
  scenarioQueueState: ScenarioQueueState!
}

type TaskType {
  connectorFree: Boolean
  description: String
  help: String
  name: String!
  parameterSpec: [PropertySpec!]
}

type TaskTypeList {
  items: [TaskType!]!
  total: Int!
}

"""Entity for Terminology"""
type Terminology {
  category: String!
  createdAt: DateTimeISO
  creator: User
  description: String
  display: String!
  domain: Domain!
  id: ID!
  locale: String!
  name: String!
  updatedAt: DateTimeISO
  updater: User
}

type TerminologyList {
  items: [Terminology!]!
  total: Int!
}

input TerminologyPatch {
  category: String
  cuFlag: String
  description: String
  display: String
  id: ID
  locale: String
  name: String
}

"""Entity for Theme"""
type Theme {
  active: Boolean
  createdAt: DateTimeISO
  creator: User
  deletedAt: DateTimeISO
  description: String
  domain: Domain!
  id: ID!
  name: String
  type: String
  updatedAt: DateTimeISO
  updater: User
  value: Object
}

type ThemeList {
  items: [Theme!]!
  total: Int!
}

input ThemePatch {
  active: Boolean
  cuFlag: String
  description: String
  id: ID
  name: String
  type: String
  value: Object
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadURL {
  fields: Any!
  url: String!
}

type User {
  createdAt: DateTimeISO
  creator: User
  description: String
  domains: [Domain!]!
  email: EmailAddress!
  id: ID!
  locale: String
  name: String
  owner: Boolean
  reference: String
  roles: [Role!]!
  ssoId: String
  status: String!
  updatedAt: DateTimeISO
  updater: User
  userType: String
  username: String
  usersAuthProviders: [UsersAuthProviders!]
}

type UserList {
  items: [User!]
  total: Int
}

input UserPatch {
  cuFlag: String
  description: String
  domains: [ObjectRef!]
  email: EmailAddress
  id: ID
  name: String
  password: String
  roles: [ObjectRef!]
  status: String
  userType: String
}

"""Entity for UserPreference"""
type UserPreference {
  createdAt: DateTimeISO
  creator: User
  domain: Domain
  id: ID!
  key: String
  preference: Object
  updatedAt: DateTimeISO
  updater: User
  user: User!
}

type UserPreferenceList {
  items: [UserPreference!]!
  total: Int!
}

input UserPreferencePatch {
  cuFlag: String
  id: ID
  key: String!
  preference: Object!
  user: ObjectRef!
}

type UserRole {
  assigned: Boolean
  description: String
  id: String
  name: String
}

"""Entity for UsersAuthProviders"""
type UsersAuthProviders {
  authProvider: AuthProvider
  createdAt: DateTimeISO
  domain: Domain!
  id: ID!
  ssoId: String
  updatedAt: DateTimeISO
  user: User
}

input i18nCompletionInput {
  json: String!
}

type i18nCompletionOutput {
  message: String
}